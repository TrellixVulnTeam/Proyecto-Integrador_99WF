{"ast":null,"code":"import { from } from '../observable/from';\nimport { take } from '../operators/take';\nimport { Subject } from '../Subject';\nimport { SafeSubscriber } from '../Subscriber';\nimport { operate } from '../util/lift';\nexport function share(options = {}) {\n  const {\n    connector = () => new Subject(),\n    resetOnError = true,\n    resetOnComplete = true,\n    resetOnRefCountZero = true\n  } = options;\n  return wrapperSource => {\n    let connection = null;\n    let resetConnection = null;\n    let subject = null;\n    let refCount = 0;\n    let hasCompleted = false;\n    let hasErrored = false;\n\n    const cancelReset = () => {\n      resetConnection === null || resetConnection === void 0 ? void 0 : resetConnection.unsubscribe();\n      resetConnection = null;\n    };\n\n    const reset = () => {\n      cancelReset();\n      connection = subject = null;\n      hasCompleted = hasErrored = false;\n    };\n\n    const resetAndUnsubscribe = () => {\n      const conn = connection;\n      reset();\n      conn === null || conn === void 0 ? void 0 : conn.unsubscribe();\n    };\n\n    return operate((source, subscriber) => {\n      refCount++;\n\n      if (!hasErrored && !hasCompleted) {\n        cancelReset();\n      }\n\n      const dest = subject = subject !== null && subject !== void 0 ? subject : connector();\n      subscriber.add(() => {\n        refCount--;\n\n        if (refCount === 0 && !hasErrored && !hasCompleted) {\n          resetConnection = handleReset(resetAndUnsubscribe, resetOnRefCountZero);\n        }\n      });\n      dest.subscribe(subscriber);\n\n      if (!connection) {\n        connection = new SafeSubscriber({\n          next: value => dest.next(value),\n          error: err => {\n            hasErrored = true;\n            cancelReset();\n            resetConnection = handleReset(reset, resetOnError, err);\n            dest.error(err);\n          },\n          complete: () => {\n            hasCompleted = true;\n            cancelReset();\n            resetConnection = handleReset(reset, resetOnComplete);\n            dest.complete();\n          }\n        });\n        from(source).subscribe(connection);\n      }\n    })(wrapperSource);\n  };\n}\n\nfunction handleReset(reset, on, ...args) {\n  if (on === true) {\n    reset();\n    return null;\n  }\n\n  if (on === false) {\n    return null;\n  }\n\n  return on(...args).pipe(take(1)).subscribe(() => reset());\n}","map":{"version":3,"names":["from","take","Subject","SafeSubscriber","operate","share","options","connector","resetOnError","resetOnComplete","resetOnRefCountZero","wrapperSource","connection","resetConnection","subject","refCount","hasCompleted","hasErrored","cancelReset","unsubscribe","reset","resetAndUnsubscribe","conn","source","subscriber","dest","add","handleReset","subscribe","next","value","error","err","complete","on","args","pipe"],"sources":["C:/Users/facun/Desktop/Argentina Programa/Proyecto Integrador/Proyecto-Integrador/Proyecto-Integrador/P-Integrador/FrontEnd/node_modules/rxjs/dist/esm/internal/operators/share.js"],"sourcesContent":["import { from } from '../observable/from';\r\nimport { take } from '../operators/take';\r\nimport { Subject } from '../Subject';\r\nimport { SafeSubscriber } from '../Subscriber';\r\nimport { operate } from '../util/lift';\r\nexport function share(options = {}) {\r\n    const { connector = () => new Subject(), resetOnError = true, resetOnComplete = true, resetOnRefCountZero = true } = options;\r\n    return (wrapperSource) => {\r\n        let connection = null;\r\n        let resetConnection = null;\r\n        let subject = null;\r\n        let refCount = 0;\r\n        let hasCompleted = false;\r\n        let hasErrored = false;\r\n        const cancelReset = () => {\r\n            resetConnection === null || resetConnection === void 0 ? void 0 : resetConnection.unsubscribe();\r\n            resetConnection = null;\r\n        };\r\n        const reset = () => {\r\n            cancelReset();\r\n            connection = subject = null;\r\n            hasCompleted = hasErrored = false;\r\n        };\r\n        const resetAndUnsubscribe = () => {\r\n            const conn = connection;\r\n            reset();\r\n            conn === null || conn === void 0 ? void 0 : conn.unsubscribe();\r\n        };\r\n        return operate((source, subscriber) => {\r\n            refCount++;\r\n            if (!hasErrored && !hasCompleted) {\r\n                cancelReset();\r\n            }\r\n            const dest = (subject = subject !== null && subject !== void 0 ? subject : connector());\r\n            subscriber.add(() => {\r\n                refCount--;\r\n                if (refCount === 0 && !hasErrored && !hasCompleted) {\r\n                    resetConnection = handleReset(resetAndUnsubscribe, resetOnRefCountZero);\r\n                }\r\n            });\r\n            dest.subscribe(subscriber);\r\n            if (!connection) {\r\n                connection = new SafeSubscriber({\r\n                    next: (value) => dest.next(value),\r\n                    error: (err) => {\r\n                        hasErrored = true;\r\n                        cancelReset();\r\n                        resetConnection = handleReset(reset, resetOnError, err);\r\n                        dest.error(err);\r\n                    },\r\n                    complete: () => {\r\n                        hasCompleted = true;\r\n                        cancelReset();\r\n                        resetConnection = handleReset(reset, resetOnComplete);\r\n                        dest.complete();\r\n                    },\r\n                });\r\n                from(source).subscribe(connection);\r\n            }\r\n        })(wrapperSource);\r\n    };\r\n}\r\nfunction handleReset(reset, on, ...args) {\r\n    if (on === true) {\r\n        reset();\r\n        return null;\r\n    }\r\n    if (on === false) {\r\n        return null;\r\n    }\r\n    return on(...args)\r\n        .pipe(take(1))\r\n        .subscribe(() => reset());\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}